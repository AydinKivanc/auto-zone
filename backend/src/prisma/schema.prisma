// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//----------- Users ---------------
model Users {
  id               Int             @id @default(autoincrement()) // String // @id @default(uuid())
  firstName        String
  lastName         String
  userName         String          @unique
  password         String
  dateOfBirth      DateTime
  addressId        Int?            @unique
  address          Address?        @relation(fields: [addressId], references: [id])
  contactDetailsId Int?            @unique
  contactDetails   ContactDetails? @relation(fields: [contactDetailsId], references: [id])
  healthNotes      String?
  references       String?
  notes            String?
  role             Roles           @default(BASIC)
  isEmailVerified  Boolean         @default(false)
  active           Boolean
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isCustomer       Customers?
  Token            Token[]
}

enum Roles {
  BASIC
  ADMIN
  BUSINESS_OWNER
  BRANCH_MANAGER
  STAFF
  INTERN
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        Users     @relation(fields: [userId], references: [id])
  userId      Int
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

//----------- Address ---------------
enum AddressType {
  HOME
  WORK
  OTHER
}

model Address {
  id          Int                           @id @default(autoincrement())
  addressType AddressType?
  line1       String?
  line2       String?
  country     String?
  city        String?
  postcode    String?
  users       Users[]
  customer    CustomersAddressConnections[]
  supplier    SupplierAddressConnections[] // SupplierAddress aracılığıyla ilişkili tedarikçiler
}

//----------- ContactDetails ---------------
model ContactDetails {
  id           Int         @id @default(autoincrement())
  email        String?     @unique
  phoneNumber  String?
  mobileNumber String?     @unique
  user         Users?
  customer     Customers[]
  supplier     Suppliers[]
}

//----------- Customers ---------------
model Customers {
  id                Int                           @id @default(autoincrement())
  name              String
  surname           String
  userName          String
  dateOfBirth       DateTime?
  addresses         CustomersAddressConnections[]
  contactDetailsId  Int?                          @unique
  contactDetails    ContactDetails?               @relation(fields: [contactDetailsId], references: [id])
  whereDidYouHearUs String?
  notes             String?
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @default(now())
  isUser            Boolean                       @default(false)
  userId            Int?                          @unique
  user              Users?                        @relation(fields: [userId], references: [id])
}

model CustomersAddressConnections {
  customerId Int
  addressId  Int
  customer   Customers @relation(fields: [customerId], references: [id])
  address    Address   @relation(fields: [addressId], references: [id])

  @@id([customerId, addressId])
}

//----------- Suppliers ---------------
model Suppliers {
  id                      Int                          @id @default(autoincrement())
  companyName             String
  supplierTypes           SupplierTypeConnections[]
  addresses               SupplierAddressConnections[] // SupplierAddress aracılığıyla ilişkili adresler
  contactDetailsId        Int?                         @unique
  contactDetails          ContactDetails?              @relation(fields: [contactDetailsId], references: [id])
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime                     @default(now())
  supplierContactsDetails SupplierContacts[]
}

model SupplierTypes {
  id        Int                       @id @default(autoincrement())
  type      String                    @unique
  suppliers SupplierTypeConnections[]
}

model SupplierTypeConnections {
  supplierId     Int
  supplier       Suppliers     @relation(fields: [supplierId], references: [id])
  supplierTypeId Int
  supplierType   SupplierTypes @relation(fields: [supplierTypeId], references: [id])

  @@id([supplierId, supplierTypeId])
}

model SupplierAddressConnections {
  supplierId Int
  addressId  Int
  supplier   Suppliers @relation(fields: [supplierId], references: [id])
  address    Address   @relation(fields: [addressId], references: [id])

  @@id([supplierId, addressId]) // Birleşik anahtar tanımlama
}

model SupplierContacts {
  id         Int        @id @default(autoincrement())
  type       String
  name       String
  supplier   Suppliers? @relation(fields: [supplierId], references: [id])
  supplierId Int
}

model Cars {
  id           Int    @id @default(autoincrement())
  brand        String
  model        String
  year         Int
  color        String
  price        Float
  mileage      Int
  fuel_type    String
  transmission String
  condition    String
}
